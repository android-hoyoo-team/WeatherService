<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/conf/jdbc.properties" />

	<bean id="dataSourcec3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.databaseurl}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="minPoolSize">
			<value>2</value>
		</property>
		<property name="maxPoolSize">
			<value>30</value>
		</property>
		<property name="initialPoolSize">
			<value>4</value>
		</property>
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<property name="acquireIncrement">
			<value>3</value>
		</property>
		<property name="maxStatements">
			<value>0</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>600</value>
		</property>
		<property name="acquireRetryAttempts">
			<value>10</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
		<property name="acquireRetryDelay">
			<value>100</value>
		</property>
		<property name="autoCommitOnClose">
			<value>false</value>
		</property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSourcec3p0" />
		<property name="packagesToScan">
			<list>
				<!-- 可以加多个包 -->
				<value>org.cz.project.entity.table</value>
			</list>
		</property>
<!-- 	<property name="annotatedClasses"> -->
<!-- 		<list> -->
<!-- 			<value>test.package.Foo</value> -->
<!-- 			<value>test.package.Bar</value> -->
<!-- 		</list> -->
<!-- 	</property> -->
<!-- 		<property name="annotatedPackages" > -->
<!-- 			<list> -->
<!-- 				<value>org.cz.project.entity.table</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
			</props>
		</property>
	</bean>
<!-- 	<bean id="sessionFactory" -->
<!-- 		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"> -->
<!-- 		<property name="dataSource" ref="dataSourcec3p0" /> -->
<!-- 		<property name="configLocation"> -->
<!-- 			<value>/WEB-INF/conf/hibernate.cfg.xml</value> -->
<!-- 		</property> -->
<!-- 		<property name="configurationClass"> -->
<!-- 			<value>org.hibernate.cfg.AnnotationConfiguration</value> -->
<!-- 		</property> -->
<!-- 		<property name="hibernateProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="hibernate.dialect">${jdbc.dialect}</prop> -->
<!-- 				<prop key="hibernate.show_sql">false</prop> -->
<!-- 				<prop key="hibernate.hbm2ddl.auto">update</prop> -->
<!-- 				<prop key="hibernate.generate_statistics">true</prop> -->
<!-- 				<prop key="hibernate.connection.release_mode">auto</prop> -->
<!-- 				<prop key="hibernate.autoReconnect">true</prop> -->
<!-- 				<prop key="hibernate.cache.use_query_cache">true</prop> -->
<!-- 				<prop key="hibernate.cache.use_second_level_cache">true</prop> -->
<!-- 				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> -->

<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- JDBC 用于自动注入 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSourcec3p0" />
	</bean>
	
	
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes:
		Spring's @Required and @Autowired, as well as JSR 250's @Resource.
	-->
<!-- 	<context:annotation-config/> -->

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	-->
	<tx:annotation-driven/>
    <context:component-scan base-package="org.cz.project" use-default-filters="true">
<!--         <context:exclude-filter type="annotation" expression=""/> -->
<!--         <context:include-filter type="annotation" expression=""/> -->
    </context:component-scan>
<!--  springMVC都会检查request里面是否包含多媒体信息，如果包含了就会使用MultipartResolver进行解析,
springMVC会使用一个支持文件处理的MultipartHttpServletRequest来包裹当前的HttpServletRequest，
然后使用MultipartHttpServletRequest就可以对文件进行处理了。Spring已经为我们提供了一个MultipartResolver的实现
，我们只需要拿来用就可以了，那就是org.springframework.web.multipart.commons.CommsMultipartResolver。
因为springMVC的MultipartResolver底层使用的是Commons-fileupload，所以还需要加入对Commons-fileupload.jar的支持 -->
 <!--  这里申明的id必须为multipartResolver  -->  
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<!-- CommonsMultipartResolver允许设置的属性有：
    defaultEncoding：表示用来解析request请求的默认编码格式，当没有指定的时候根据Servlet规范会使用默认值ISO-8859-1。当request自己指明了它的编码格式的时候就会忽略这里指定的defaultEncoding。
    uploadTempDir：设置上传文件时的临时目录，默认是Servlet容器的临时目录。
    maxUploadSize：设置允许上传的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。
 	maxInMemorySize：设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。 -->
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="100000000" />
		
	</bean>
</beans>